{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["FeedbackOptions","options","onLeaveFeedback","getNameOfItem","namesOfItems","Object","keys","className","s","list","map","item","onClick","button","Statistics","good","neutral","bad","countTotalFeedback","countPositiveFeedbackPercentage","Section","title","children","Notification","message","App","state","setActiveItem","setState","PrevState","name","slice","toUpperCase","toLowerCase","values","reduce","acc","mark","Math","round","this","React","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+QAuCeA,MAtBf,YAAuE,IAA5CC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,gBAAiBC,EAAiB,EAAjBA,cAC7CC,EAAeC,OAAOC,KAAKL,GAEjC,OACE,oBAAIM,UAAWC,IAAEC,KAAjB,SACGL,EAAaM,KAAI,SAAAC,GAAI,OACpB,6BACE,yBAAQC,QAAS,kBAAMV,EAAgBS,IAAOJ,UAAWC,IAAEK,OAA3D,UACGV,EAAcQ,GAAO,QAFjBA,SCKFG,EA1BI,SAAC,GAAD,IACjBC,EADiB,EACjBA,KACAC,EAFiB,EAEjBA,QACAC,EAHiB,EAGjBA,IACAC,EAJiB,EAIjBA,mBACAC,EALiB,EAKjBA,gCALiB,OAOjB,gCACE,uCACQ,+BAAOJ,OAEf,0CACW,+BAAOC,OAElB,sCACO,+BAAOC,OAEd,wCACS,+BAAOC,OAEhB,oDACqB,iCAAOC,EAAP,cCdVC,MATf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,gCACE,6BAAKD,IACJC,MCAQC,MAJf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KC+EEC,E,4MAxEbC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAoBPU,cAAgB,SAAAhB,GACd,EAAKiB,UAAS,SAAAC,GAAS,sBACpBlB,EAAOkB,EAAUlB,GAAQ,O,EAI9BR,cAAgB,SAAA2B,GACd,MAAM,GAAN,OAAUA,EAAKC,MAAM,EAAG,GAAGC,eAA3B,OAA2CF,EAAKC,MAAM,GAAGE,gB,EAG3Df,mBAAqB,WACnB,OAAOb,OAAO6B,OAAO,EAAKR,OAAOS,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,IAAM,I,EAErElB,gCAAkC,WAChC,OAAOmB,KAAKC,MAAyB,IAAlB,EAAKb,MAAMX,KAAc,EAAKG,uB,uDAGjD,OACE,qCACE,cAAC,EAAD,CAASG,MAAM,wBAAf,SAME,cAAC,EAAD,CACEpB,QAASuC,KAAKd,MACdxB,gBAAiBsC,KAAKb,cACtBxB,cAAeqC,KAAKrC,kBAGxB,cAAC,EAAD,CAASkB,MAAM,aAAf,SACiC,IAA9BmB,KAAKtB,qBACJ,cAAC,EAAD,CAAcM,QAAQ,sBAEtB,cAAC,EAAD,CACET,KAAMyB,KAAKd,MAAMX,KACjBC,QAASwB,KAAKd,MAAMV,QACpBC,IAAKuB,KAAKd,MAAMT,IAChBC,mBAAoBsB,KAAKtB,qBACzBC,gCAAiCqB,KAAKrB,6C,GAhElCsB,IAAMC,WCDxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BC,EAAOC,QAAU,CAAC,KAAO,8BAA8B,OAAS,mC","file":"static/js/main.b24f28ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\n// const FeedbackOptions = ({ onClickGood, onClickNeutral, onClickBad }) => (\r\n//   <div>\r\n//     <button className={s.button} type=\"button\" onClick={onClickGood}>\r\n//       good\r\n//     </button>\r\n//     <button className={s.button} type=\"button\" onClick={onClickNeutral}>\r\n//       neutral\r\n//     </button>\r\n//     <button className={s.button} type=\"button\" onClick={onClickBad}>\r\n//       bad\r\n//     </button>\r\n//   </div>\r\n// );\r\nfunction FeedbackOptions({ options, onLeaveFeedback, getNameOfItem }) {\r\n  const namesOfItems = Object.keys(options);\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {namesOfItems.map(item => (\r\n        <li key={item}>\r\n          <button onClick={() => onLeaveFeedback(item)} className={s.button}>\r\n            {getNameOfItem(item)}{' '}\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.objectOf(PropTypes.number).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n  getNameOfItem: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\n\r\nconst Statistics = ({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  countTotalFeedback,\r\n  countPositiveFeedbackPercentage,\r\n}) => (\r\n  <div>\r\n    <p>\r\n      Good: <span>{good}</span>\r\n    </p>\r\n    <p>\r\n      Neutral: <span>{neutral}</span>\r\n    </p>\r\n    <p>\r\n      Bad: <span>{bad}</span>\r\n    </p>\r\n    <p>\r\n      Total: <span>{countTotalFeedback}</span>\r\n    </p>\r\n    <p>\r\n      Positive Feedback: <span>{countPositiveFeedbackPercentage}%</span>\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport default Statistics;\r\n","function Section({ title, children }) {\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Section;\r\n","function Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\r\n// import MarkList from './components/Marks/Marks';\r\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\r\nimport Statistics from './components/Statistics/Statistics';\r\nimport Section from './components/Section/Section';\r\nimport Notification from './components/Notification/Notification';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  // onClickGood = () => {\r\n  //   this.setState(prevState => ({\r\n  //     good: prevState.good + 1,\r\n  //   }));\r\n  // };\r\n  // onClickNeutral = () => {\r\n  //   this.setState(prevState => ({\r\n  //     neutral: prevState.neutral + 1,\r\n  //   }));\r\n  // };\r\n  // onClickBad = () => {\r\n  //   this.setState(prevState => {\r\n  //     return {\r\n  //       bad: prevState.bad + 1,\r\n  //     };\r\n  //   });\r\n  // };\r\n  setActiveItem = item => {\r\n    this.setState(PrevState => ({\r\n      [item]: PrevState[item] + 1,\r\n    }));\r\n  };\r\n\r\n  getNameOfItem = name => {\r\n    return `${name.slice(0, 1).toUpperCase()}${name.slice(1).toLowerCase()}`;\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    return Object.values(this.state).reduce((acc, mark) => acc + mark, 0);\r\n  };\r\n  countPositiveFeedbackPercentage = () => {\r\n    return Math.round((this.state.good * 100) / this.countTotalFeedback());\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <Section title=\"Please leave feedback\">\r\n          {/* <FeedbackOptions\r\n          onClickGood={this.onClickGood}\r\n          onClickNeutral={this.onClickNeutral}\r\n          onClickBad={this.onClickBad}\r\n        /> */}\r\n          <FeedbackOptions\r\n            options={this.state}\r\n            onLeaveFeedback={this.setActiveItem}\r\n            getNameOfItem={this.getNameOfItem}\r\n          />\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          {this.countTotalFeedback() === 0 ? (\r\n            <Notification message=\"No feedback given\"></Notification>\r\n          ) : (\r\n            <Statistics\r\n              good={this.state.good}\r\n              neutral={this.state.neutral}\r\n              bad={this.state.bad}\r\n              countTotalFeedback={this.countTotalFeedback()}\r\n              countPositiveFeedbackPercentage={this.countPositiveFeedbackPercentage()}\r\n            />\r\n          )}\r\n        </Section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FeedbackOptions_list__RnEdx\",\"button\":\"FeedbackOptions_button__Vy54z\"};"],"sourceRoot":""}